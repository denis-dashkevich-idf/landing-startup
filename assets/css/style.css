/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{line-height:1.15;-webkit-text-size-adjust:100%;font-family:'DM Sans'}body{margin:0}.header__menu .sub-menu>.menu-item:hover .sub-menu,details,img,main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none;max-width:100%}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}:root{--txt-black:#0F2137;--bg-gr-prime:linear-gradient(105.18deg, #1E3C72 -2.04%, #2A5298 107.42%);--content-width:1250px;--gutter:15px;--mob-padding:20px}@font-face{font-family:'DM Sans';font-style:normal;font-weight:400;font-display:swap;src:local(""),url(../fonts/dm-sans/dm-sans-v6-latin-regular.woff2) format("woff2"),url(../fonts/dm-sans/dm-sans-v6-latin-regular.woff) format("woff")}@font-face{font-family:'DM Sans';font-style:normal;font-weight:500;font-display:swap;src:local(""),url(../fonts/dm-sans/dm-sans-v6-latin-500.woff2) format("woff2"),url(../fonts/dm-sans/dm-sans-v6-latin-500.woff) format("woff")}@font-face{font-family:'DM Sans';font-style:normal;font-weight:700;font-display:swap;src:local(""),url(../fonts/dm-sans/dm-sans-v6-latin-700.woff2) format("woff2"),url(../fonts/dm-sans/dm-sans-v6-latin-700.woff) format("woff")}.container{max-width:var(--content-width);padding-left:var(--mob-padding);padding-right:var(--mob-padding);margin-left:auto;margin-right:auto}.row{display:flex;flex-wrap:wrap;margin-left:calc(var(--gutter)*-1);margin-right:calc(var(--gutter)*-1)}body.content-hidden{overflow:hidden}*,::after,::before{box-sizing:border-box}.burger{display:none;flex-direction:column;justify-content:space-between;width:30px;height:25px;cursor:pointer;color:#fff;z-index:9}.burger_closed .burger__line:nth-child(1){transform:translate(0,12px) rotate(45deg)}.burger_closed .burger__line:nth-child(2){display:none}.burger_closed .burger__line:nth-child(3){transform:translate(0,-12px) rotate(-45deg)}.burger__line{height:2px;background:currentColor;transition:.3s}.btn,.header__menu .menu-item>a{display:inline-block;font-size:16px;text-decoration:none}.btn{border:1.5px solid #fff;padding:13px 30px;font-weight:500;text-align:center;cursor:pointer;border-radius:50px;appearance:none}.footer{background:#000;font-size:24px;color:gray}.header{position:fixed;top:0;left:0;width:100%;padding:20px 0;transition:.2s;color:#fff}.header_has-bg{background:#f1f1f1}.header_has-bg,.header_menu-opend{color:var(--txt-black)}.header__inner{display:flex;justify-content:space-between;align-items:center}.header__logo-wrap{display:flex;align-items:center;text-decoration:none;color:currentColor}.header__logo path{fill:currentColor}.header__logo-text{font-weight:700;font-size:20px;margin-left:10px;opacity:.8}.header__menu{margin:0;padding:0;list-style-type:none;display:flex}.header__menu .menu-item{position:relative}.header__menu .menu-item:hover a{background:#fff;color:var(--txt-black)}.header__menu .menu-item:hover .sub-menu{opacity:1;visibility:visible;transform:translate(0,0)}.header__menu .menu-item>a{color:currentColor;font-weight:400;padding:15px}.header__menu .sub-menu{position:absolute;top:100%;left:0;width:150px;padding:0;background:#fff;list-style-type:none;opacity:0;visibility:hidden;transform:translate(0,-20px);transition:.3s}.header__menu .sub-menu>.menu-item:hover>a{background:#f1f1f1}.header__menu .sub-menu>.menu-item>a{width:100%}.header__menu .sub-menu .sub-menu{display:none;position:absolute;top:0;left:100%}.header__cta{border-color:currentColor}.header__burger,.header__cta{color:currentColor}.promo{padding-top:180px;padding-bottom:200px;background-image:var(--bg-gr-prime)}@media (max-width:992px){.burger{display:flex}.header__logo-wrap{position:relative;z-index:15}.header__menu-container{display:none;position:fixed;padding:80px 25px 0;top:0;bottom:0;left:0;right:0;background:#f1f1f1;z-index:9}.header__menu-container_visible{display:block}.header__nav{height:100%;overflow-y:auto}.header__menu{flex-direction:column}.header__menu .menu-item:hover a,.header__menu .sub-menu>.menu-item:hover>a{background:0 0}.header__menu .menu-item>a{font-size:22px}.header__menu .sub-menu{position:static;opacity:1;visibility:visible;transform:translate(0,0);background:0 0;padding-left:30px}.header__menu .sub-menu>.menu-item>a{font-size:18px}.header__menu .sub-menu .sub-menu{display:block;position:static;padding-left:20px}.header__cta{position:relative;margin-left:auto;margin-right:30px;z-index:15}}@media (max-width:640px){.btn{font-size:14px;padding:10px 20px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
